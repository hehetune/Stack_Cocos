CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        center: { value: [0.5, 0.5], editor: { type: vec2 } }
        time: { value: 0.0, editor: { type: number } }
        resolution: { value: [1.0, 1.0], editor: { type: vec2 } }
        shockParams: { value: [1.0, 10.0, 0.1, 0.2], editor: { type: vec4 } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec2 uv0;

  vec4 vert() {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    pos = cc_matViewProj * pos;

    uv0 = a_texCoord;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  
  uniform sampler2D cc_spriteTexture;
  uniform float time;
  uniform vec2 resolution;
  uniform vec2 center;
  uniform vec4 shockParams;

  in vec2 uv0;

  vec4 frag() {
    vec2 uv = uv0;
    vec2 toCenter = uv - center;
    float distance = length(toCenter);
    float wave = sin(distance * shockParams.y - time * shockParams.x) * shockParams.z;
    float attenuation = smoothstep(shockParams.w, 0.0, distance);

    uv += toCenter * wave * attenuation;

    vec4 color = texture2D(cc_spriteTexture, uv);
    return color;
  }
}%
